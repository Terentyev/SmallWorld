CREATE DATABASE 'SMALLWORLD.FDB' USER 'sysdba' PASSWORD 'masterkey' DEFAULT CHARACTER SET UTF8;


CREATE TABLE PLAYERS (
  id        INTEGER NOT NULL PRIMARY KEY,
  username  VARCHAR(16) NOT NULL UNIQUE,
  pass      VARCHAR(18), 
  sid       INTEGER DEFAULT NULL,
  isAI      INTEGER DEFAULT 0
);

CREATE TABLE MAPS (
  id          INTEGER NOT NULL PRIMARY KEY,
  name        VARCHAR(16) NOT NULL UNIQUE,
  playersNum  SMALLINT NOT NULL,
  turnsNum    SMALLINT NOT NULL,
  regions     BLOB SUB_TYPE 1
);

CREATE TABLE GAMES (
  id             INTEGER NOT NULL PRIMARY KEY,
  name           VARCHAR(50) NOT NULL UNIQUE,
  description    VARCHAR(300),
  gstate         SMALLINT DEFAULT 1 NOT NULL,
  aiNum          SMALLINT,
  mapId          INTEGER NOT NULL REFERENCES MAPS(id) ON UPDATE CASCADE ON DELETE CASCADE,
  state          BLOB SUB_TYPE 1,
  version        INTEGER DEFAULT 0 NOT NULL,
  activePlayerId INTEGER REFERENCES PLAYERS(id) ON UPDATE CASCADE ON DELETE CASCADE,
  currentTurn    INTEGER,
  genNum         INTEGER
);

CREATE TABLE MESSAGES (
  id       INTEGER NOT NULL PRIMARY KEY,
  text     VARCHAR(300),
  playerId INTEGER NOT NULL REFERENCES PLAYERS(id) ON UPDATE CASCADE ON DELETE CASCADE,
  t        TIMESTAMP DEFAULT NULL
);

CREATE TABLE CONNECTIONS (
  id       INTEGER NOT NULL PRIMARY KEY,
  gameId   INTEGER NOT NULL REFERENCES GAMES(id) ON UPDATE CASCADE ON DELETE CASCADE,
  playerId INTEGER NOT NULL REFERENCES PLAYERS(id) ON UPDATE CASCADE ON DELETE CASCADE,
  isReady  SMALLINT DEFAULT 0 NOT NULL
);

CREATE TABLE HISTORY (
  id     INTEGER NOT NULL PRIMARY KEY,
  gameId INTEGER NOT NULL REFERENCES GAMES(id) ON UPDATE CASCADE ON DELETE CASCADE,
  cmd    BLOB SUB_TYPE 1
);


CREATE GENERATOR GEN_PLAYER_ID;
CREATE GENERATOR GEN_SID;
CREATE GENERATOR GEN_MESSAGE_ID;
CREATE GENERATOR GEN_GAME_ID;
CREATE GENERATOR GEN_MAP_ID;
CREATE GENERATOR GEN_CONNECTION_ID;
CREATE GENERATOR GEN_HISTORY_ID;

CREATE EXCEPTION tooManyAI 'Too many AI';


SET TERM ^;

CREATE TRIGGER PLAYERID FOR PLAYERS
BEFORE INSERT
AS
BEGIN 
  new.id = gen_id(GEN_PLAYER_ID, 1);
END^


CREATE PROCEDURE MAKESID(name VARCHAR(16), pass VARCHAR(18))
RETURNS (newSid INTEGER)
AS   
DECLARE VARIABLE oldsid INTEGER;
BEGIN   
  newSid = GEN_ID(GEN_SID, 1);
  UPDATE PLAYERS SET sid = :newSid WHERE username = :name AND pass = :pass;
  SUSPEND;
END^ 


CREATE PROCEDURE LOGOUT(sid INTEGER)
AS   
BEGIN   
  UPDATE PLAYERS SET sid = NULL WHERE sid = :sid;
END^

CREATE PROCEDURE AIJOIN(gameId INTEGER)
RETURNS (aiId INTEGER, aiSid INTEGER)
AS
DECLARE VARIABLE aiMaxNum INTEGER;
DECLARE VARIABLE aiNum INTEGER;
DECLARE VARIABLE aiName VARCHAR(16);
BEGIN
  -- подсчитаем количество уже подключенных к игру ИИ
  SELECT
    COUNT(*)
  FROM
    PLAYERS p
    INNER JOIN
      CONNECTIONS c
    ON c.playerId = p.id
  WHERE
    c.gameId = :gameId AND isAI = 1
  INTO :aiNum;

  -- узнаем сколько максимум может быть ИИ в игре
  SELECT aiNum FROM GAMES WHERE id = :gameId INTO :aiMaxNum;

  IF (aiNum + 1 > aiMaxNum) THEN
    EXCEPTION tooManyAI;

  aiSid = GEN_ID(GEN_SID, 1);
  aiName = '_ai' || CAST(gameId AS VARCHAR(8)) || '.' || CAST(aiNum AS VARCHAR(2));
  SELECT id FROM PLAYERS WHERE username = :aiName INTO :aiId;
  IF (aiId IS NULL) THEN
  BEGIN
    INSERT INTO PLAYERS(sid, username, pass, isAI) VALUES(:aiSid, :aiName, 'ai', 1);
    SELECT id FROM PLAYERS WHERE username = :aiName INTO :aiId;
  END
  ELSE
  BEGIN
    UPDATE PLAYERS SET sid = :aiSid WHERE id = :aiId;
    DELETE FROM CONNECTIONS WHERE playerId = :aiId;
  END
  INSERT INTO CONNECTIONS(playerId, gameId, isReady) VALUES(:aiId, :gameId, 1);
  SUSPEND;
END^


CREATE TRIGGER MAPID FOR MAPS
BEFORE INSERT
AS
BEGIN 
  new.id = gen_id(GEN_MAP_ID, 1);
END^


CREATE TRIGGER GAMEID FOR GAMES
BEFORE INSERT
AS
BEGIN
  new.id = gen_id(GEN_GAME_ID, 1);
END^


CREATE TRIGGER CONNECTIONID FOR CONNECTIONS
BEFORE INSERT
AS
BEGIN 
  new.id = gen_id(GEN_CONNECTION_ID, 1);
END^


CREATE TRIGGER MESSAGEID FOR MESSAGES
BEFORE INSERT
AS
BEGIN 
  new.id = gen_id(GEN_MESSAGE_ID, 1);
  new.t = CURRENT_TIMESTAMP;
END^

CREATE TRIGGER HISTORYID FOR HISTORY
BEFORE INSERT
AS
BEGIN
  new.id = gen_id(GEN_HISTORY_ID, 1);
END^

SET TERM ; ^


CONNECT 'SMALLWORLD.FDB' USER 'sysdba' PASSWORD 'masterkey';
